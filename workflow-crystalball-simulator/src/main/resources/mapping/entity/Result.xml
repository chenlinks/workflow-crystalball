<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
  
<mapper namespace="org.activiti.crystalball.simulator.impl.persistence.entity.ResultEntity">

  <!-- SimulationResult INSERT -->
  
  <insert id="insertResult" parameterType="org.activiti.crystalball.simulator.impl.persistence.entity.ResultEntity">
    insert into ${prefix}CRB_RU_RESULT (ID_, RUN_ID_, TYPE_)
    values (#{id, jdbcType=VARCHAR},
            #{runId, jdbcType=VARCHAR},
            #{type, jdbcType=VARCHAR},
           )
  </insert>

  <!-- TASK UPDATE -->
  
  <update id="updateResult" parameterType="org.activiti.crystalball.simulator.impl.persistence.entity.ResultEntity">
    update ${prefix}CRB_RU_RESULT
    <set>
      RUN_ID_ = #{runId, jdbcType=VARCHAR},
      TYPE_ = #{type, jdbcType=VARCHAR},
    </set>
    where ID_= #{id, jdbcType=VARCHAR}
  </update>

  
  <!-- Result RESULTMAP -->
  
  <resultMap id="resultMap" type="org.activiti.crystalball.simulator.impl.persistence.entity.ResultEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR"/>
    <result property="runId" column="RUN_ID_" jdbcType="VARCHAR"/>
    <result property="type" column="TYPE_" jdbcType="VARCHAR"/>
  </resultMap>

  <!-- RESULT SELECT -->  

   <select id="selectResult" parameterType="string" resultMap="resultMap">
   select * from ${prefix}CRB_RU_RESULT where ID_ = #{id}
  </select>
  
<!--
  <select id="selectResultByTaskDefinitionKeyAndProcessDefinitionKeyAnd" parameterType="org.activiti.crystalball.simulator.impl.TaskQueryImpl" resultMap="resultMap">
    select * from ${prefix}ACT_RU_TASK where PROCESS_DEFINITION_ID_ = #{processDefinitionKey} and
  </select>

  <select id="selectTasksByExecutionId" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    select distinct T.*
    from ${prefix}ACT_RU_TASK T
    where T.EXECUTION_ID_ = #{parameter}
  </select>
  
  <select id="selectTasksByProcessInstanceId" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select T.*
    from ${prefix}ACT_RU_TASK T
    where T.PROC_INST_ID_ = #{parameter}
  </select>
-->
  <select id="selectResultsByQueryCriteria" parameterType="org.activiti.crystalball.simulator.impl.ResultQueryImpl" resultMap="resultMap">
    ${limitBefore}
    select RES.* ${limitBetween}
    <include refid="selectResultsByQueryCriteriaSql"/> 
    ${orderBy}
    ${limitAfter}
  </select>

  <select id="selectResultsCountByQueryCriteria" parameterType="org.activiti.crystalball.simulator.impl.ResultQueryImpl" resultType="long">
    select count(RES.ID_)
    <include refid="selectResultsByQueryCriteriaSql"/>
  </select>
  
  <sql id="selectResultsByQueryCriteriaSql">  
    from ${prefix}CRB_RU_RESULT RES
    <if test="simulationInstanceId != null">
      inner join ${prefix}CRB_RU_SIMULATION_RUN RUN on RUN.ID_ = RES.RUN_ID_
    </if>        
    <foreach collection="variables" index="index" item="var">
      <choose>
        <when test="var.local">
          inner join ${prefix}CRB_RU_VARIABLE A${index} on RES.ID_ = A${index}.RESULT_ID_ 
        </when>
        <otherwise>
          inner join ${prefix}CRB_RU_VARIABLE A${index} on RES.ID_ = A${index}.RESULT_ID_ 
        </otherwise>
      </choose>       
    </foreach>
    <where> 
      <if test="simulationInstanceId != null">
        RUN.SIMULATION_ID_ = #{simulationInstanceId}
      </if>
      <if test="type != null">
        and RES.TYPE_ = #{type}
      </if>

      <foreach item="var" collection="variables" index="index">
        <if test="!var.local">
          <!-- When Simulation variable is queried for, RUN_ID should be null -->
          and A${index}.RUN_ID_ is null
        </if>
        <if test="var.name != null">
          <!--Match-all variable-names when name is null-->
           and A${index}.NAME_= #{var.name}
        </if>
        <!-- if test="!var.type.equals('null')">
          and A${index}.TYPE_ = #{var.type}
        </if-->
        <!-- Variable value -->
        <if test="var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
          <choose>
            <when test="var.operator.equals('EQUALS_IGNORE_CASE') || var.operator.equals('NOT_EQUALS_IGNORE_CASE')">
              and lower(A${index}.TEXT_)
            </when>
            <otherwise>
              and A${index}.TEXT_
            </otherwise>
          </choose> 
          <choose>
              <when test="var.operator.equals('LIKE')">LIKE</when>
              <otherwise><include refid="executionVariableOperator" /></otherwise>
          </choose>          
          #{var.textValue}
        </if>
        <if test="var.textValue2 != null">
          and A${index}.TEXT2_ 
          <choose>
            <when test="var.operator.equals('LIKE')">LIKE</when>
            <otherwise><include refid="executionVariableOperator" /></otherwise>
          </choose>          
          #{var.textValue2}
        </if>
        <if test="var.longValue != null">
          and A${index}.LONG_
          <include refid="executionVariableOperator" />
          #{var.longValue}
        </if>
        <if test="var.doubleValue != null">
          and A${index}.DOUBLE_ 
          <include refid="executionVariableOperator" />
          #{var.doubleValue}
        </if>
        <!-- Null variable type -->
         <if test="var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
          <choose>
            <when test="var.operator.equals('NOT_EQUALS')">
              and (A${index}.TEXT_ is not null or A${index}.TEXT2_ is not null or A${index}.LONG_ is not null or A${index}.DOUBLE_ is not null or A${index}.BYTEARRAY_ID_ is not null)
            </when>
            <otherwise>
              and A${index}.TEXT_ is null and A${index}.TEXT2_ is null and A${index}.LONG_ is null and A${index}.DOUBLE_ is null and A${index}.BYTEARRAY_ID_ is null
            </otherwise>
          </choose>          
        </if>
      </foreach>
<!-- 
      <if test="suspensionState != null">
        <if test="suspensionState.stateCode == 1">
            and RES.SUSPENSION_STATE_ = 1
        </if>
        <if test="suspensionState.stateCode == 2">
            and RES.SUSPENSION_STATE_ = 2
        </if>
      </if>
-->
    </where>
  </sql>
  
  <sql id="executionVariableOperator">
    <choose>
      <when test="var.operator.equals('EQUALS')">=</when>
      <when test="var.operator.equals('EQUALS_IGNORE_CASE')">=</when>
      <when test="var.operator.equals('NOT_EQUALS')">&lt;&gt;</when>
      <when test="var.operator.equals('NOT_EQUALS_IGNORE_CASE')">&lt;&gt;</when>
      <when test="var.operator.equals('GREATER_THAN')">&gt;</when>
      <when test="var.operator.equals('GREATER_THAN_OR_EQUAL')">&gt;=</when>
      <when test="var.operator.equals('LESS_THAN')">&lt;</when>
      <when test="var.operator.equals('LESS_THAN_OR_EQUAL')">&lt;=</when>
   </choose>
  </sql>  

  <select id="selectTaskByNativeQuery" parameterType="java.util.Map" resultMap="resultMap">
    ${sql}
  </select>

  <select id="selectTaskCountByNativeQuery" parameterType="java.util.Map" resultType="long">
     ${sql}
  </select>

 </mapper>