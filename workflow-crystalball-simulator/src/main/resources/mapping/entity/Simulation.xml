<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
  
<mapper namespace="org.activiti.crystalball.simulator.impl.persistence.entity.SimulationInstanceEntity">
  
  <!-- SIMULATION INSERT -->
  <insert id="insertSimulationInstance" parameterType="org.activiti.crystalball.simulator.impl.persistence.entity.SimulationInstanceEntity">
    insert into ${prefix}CRB_RU_SIMULATION(ID_, NAME_, DESCRIPTION_, AUTHOR_, SUSPENSION_STATE_, START_, END_, REPLICATION_, REPLICATION_COUNTER_, SEED_, SIMULATION_CONFIG_URL_)
    values (#{id, jdbcType=VARCHAR},
            #{name, jdbcType=VARCHAR},
            #{description, jdbcType=VARCHAR},
            #{author, jdbcType=VARCHAR},
            #{suspensionState, jdbcType=INTEGER},
      		#{start, jdbcType=TIMESTAMP},            
      		#{end, jdbcType=TIMESTAMP},            
            #{replication, jdbcType=INTEGER},
    		1,
        	#{seed,jdbcType=BIGINT},
            #{simulationConfigUrl, jdbcType=VARCHAR})
  </insert>
  
  <select id="selectSimulationInstanceById" parameterType="string" resultMap="simulationResultMap">
    select * from ${prefix}CRB_RU_SIMULATION where ID_ = #{simulationInstanceId}
  </select>
  
  
  
    <!-- SIMULATION INSTANCE UPDATE -->

  <update id="updateSimulationInstance" parameterType="org.activiti.crystalball.simulator.impl.persistence.entity.SimulationInstanceEntity">
    update ${prefix}CRB_RU_SIMULATION set
      SUSPENSION_STATE_ = #{suspensionState, jdbcType=INTEGER}
    where ID_ = #{id, jdbcType=VARCHAR}
  </update>

  <!-- PROCESSDEFINITION DELETE -->

  <delete id="deleteProcessDefinitionsByDeploymentId" parameterType="string">
    delete from ${prefix}ACT_RE_PROCDEF where DEPLOYMENT_ID_ = #{deploymenId} 
  </delete>
  
  <!-- SIMULATION RESULTMAP -->

  <resultMap id="simulationResultMap" type="org.activiti.crystalball.simulator.impl.persistence.entity.SimulationInstanceEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="name" column="NAME_" />
    <result property="description" column="DESCRIPTION_" jdbcType="VARCHAR" />
    <result property="author" column="AUTHOR_" jdbcType="VARCHAR"/>
    <result property="suspensionState" column="SUSPENSION_STATE_" jdbcType="INTEGER"/>
    <result property="start" column="START_" jdbcType="TIMESTAMP"/>
    <result property="end" column="END_" jdbcType="TIMESTAMP"/>
    <result property="replication" column="REPLICATION_" jdbcType="INTEGER"/>
    <result property="replicationCounter" column="REPLICATION_COUNTER_" jdbcType="INTEGER"/>
    <result property="seed" column="SEED_" jdbcType="BIGINT"/>
    <result property="simulationConfigUrl" column="SIMULATION_CONFIG_URL_" jdbcType="VARCHAR" />
  </resultMap>

  <!-- SIMULATION INSTANCE SELECT -->
  
  <select id="selectSimulationInstancesByQueryCriteria" parameterType="org.activiti.crystalball.simulator.impl.SimulationInstanceQueryImpl" resultMap="simulationResultMap">
  	${limitBefore}
    select RES.* ${limitBetween}, P.KEY_ as ProcessDefinitionKey, P.ID_ as ProcessDefinitionId
    <include refid="selectSimulationInstancesByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </select>
  
  <select id="selectSimulationInstanceCountByQueryCriteria" parameterType="org.activiti.crystalball.simulator.impl.SimulationInstanceQueryImpl" resultType="long">
    select count(*)
    <include refid="selectSimulationInstancesByQueryCriteriaSql"/>
  </select>
    
  <sql id="selectSimulationInstancesByQueryCriteriaSql">
    from ${prefix}CRB_RU_SIMULATION RES
    <foreach collection="queryVariableValues" index="index" item="queryVariableValue">
      <choose>
        <when test="queryVariableValue.local">
          inner join ${prefix}ACT_RU_VARIABLE A${index} on RES.ID_ = A${index}.RUN_ID_
        </when>
        <otherwise>
          inner join ${prefix}ACT_RU_VARIABLE A${index} on RES.PROC_INST_ID_ = A${index}.SIMULATION_INST_ID_
        </otherwise>
      </choose> 
    </foreach>
<!--     <if test="eventSubscriptions != null">
    	 <foreach collection="eventSubscriptions" index="index" item="eventSubscriptionValue">
    	 	inner join ${prefix}ACT_RU_EVENT_SUBSCR EVT${index} on RES.ID_ = EVT${index}.EXECUTION_ID_
	    </foreach>
    </if>
    inner join ${prefix}ACT_RE_PROCDEF P on RES.PROC_DEF_ID_ = P.ID_
 -->
    <where>
      <if test="simulationDefinitionId != null">
        and RES.SIMULATION_CONFIG_URL_ = #{simulationDefinitionId}
      </if>
      <if test="simulationInstanceId != null">
        and RES.ID_ = #{simulationInstanceId}
      </if>
      <if test="simulationInstanceIds != null and !simulationInstanceIds.isEmpty()">
        and RES.PROC_INST_ID_ in
        <foreach item="item" index="index" collection="simulationInstanceIds" open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="name != null">
        and RES.NAME_ = #{name}
      </if>
      <if test="suspensionState != null">
      	<if test="suspensionState.stateCode == 1">
        	and (RES.SUSPENSION_STATE_ = 1)
        </if>
        <if test="suspensionState.stateCode == 2">
        	and (RES.SUSPENSION_STATE_ = 2)
        </if>
        <if test="suspensionState.stateCode == 3">
        	and (RES.SUSPENSION_STATE_ = 3)
        </if>
      </if>
      <!-- PLEASE NOTE: If you change anything have a look into the HistoricVariableInstance & HistoricProcessInstance, the same query object is used there! -->
      <foreach collection="queryVariableValues" index="index" item="queryVariableValue">
        <if test="!queryVariableValue.local">
          <!-- When process instance variable is queried for, only process variables are taken into account -->
          and A${index}.EXECUTION_ID_ = A${index}.SIMULATION_INST_ID_
        </if>
        <if test="queryVariableValue.name != null">
          <!-- Match-all variable-names when name is null -->
          and A${index}.NAME_= #{queryVariableValue.name}
        </if>
        <if test="!queryVariableValue.type.equals('null')">
        <!-- When operator is not-equals or type of value is null, type doesn't matter! -->
          and A${index}.TYPE_ = #{queryVariableValue.type}
        </if>
      	<if test="queryVariableValue.textValue != null &amp;&amp; queryVariableValue.longValue == null &amp;&amp; queryVariableValue.doubleValue == null">
          <choose>
            <when test="queryVariableValue.operator.equals('EQUALS_IGNORE_CASE') || queryVariableValue.operator.equals('NOT_EQUALS_IGNORE_CASE')">
              and lower(A${index}.TEXT_)
            </when>
            <otherwise>
              and A${index}.TEXT_
            </otherwise>
          </choose>
	      <choose>
	        <when test="queryVariableValue.operator.equals('LIKE')">LIKE</when>
	        <otherwise><include refid="executionVariableOperator" /></otherwise>
	      </choose>
  	      #{queryVariableValue.textValue}
      	</if>
      	<if test="queryVariableValue.textValue2 != null">
	      and A${index}.TEXT2_
	      <choose>
	        <when test="queryVariableValue.operator.equals('LIKE')">LIKE</when>
	        <otherwise><include refid="executionVariableOperator" /></otherwise>
	      </choose>
	        #{queryVariableValue.textValue2}
      	</if>
      	<if test="queryVariableValue.longValue != null">
	      and A${index}.LONG_
	      <include refid="executionVariableOperator" />
	      #{queryVariableValue.longValue}
      	</if>
      	<if test="queryVariableValue.doubleValue != null">
	      and A${index}.DOUBLE_
	      <include refid="executionVariableOperator" />
	      #{queryVariableValue.doubleValue}
      	</if>
      	<!-- Null variable type -->
      	<if test="queryVariableValue.textValue == null &amp;&amp; queryVariableValue.textValue2 == null &amp;&amp; queryVariableValue.longValue == null &amp;&amp; queryVariableValue.doubleValue == null">
          <choose>
	        <when test="queryVariableValue.operator.equals('NOT_EQUALS')">
	          and (A${index}.TEXT_ is not null or A${index}.TEXT2_ is not null or A${index}.LONG_ is not null or A${index}.DOUBLE_ is not null or A${index}.BYTEARRAY_ID_ is not null)
	        </when>
	        <otherwise>
			  and A${index}.TEXT_ is null and A${index}.TEXT2_ is null and A${index}.LONG_ is null and A${index}.DOUBLE_ is null and A${index}.BYTEARRAY_ID_ is null
	        </otherwise>
	      </choose>
      	</if>
      </foreach>
      <!-- event subscriptions -->
<!--       <if test="eventSubscriptions != null">
    	 <foreach collection="eventSubscriptions" index="index" item="eventSubscriptionValue">
    	    and (EVT${index}.EVENT_TYPE_ = #{eventSubscriptionValue.eventType} and EVT${index}.EVENT_NAME_ = #{eventSubscriptionValue.eventName}) 
	    </foreach>
      </if>
 -->
     </where>
  </sql>
  
  <sql id="executionVariableOperator">
    <choose>
   	  <when test="queryVariableValue.operator.equals('EQUALS')">=</when>
   	  <when test="queryVariableValue.operator.equals('EQUALS_IGNORE_CASE')">=</when>
   	  <when test="queryVariableValue.operator.equals('NOT_EQUALS')">&lt;&gt;</when>
   	  <when test="queryVariableValue.operator.equals('NOT_EQUALS_IGNORE_CASE')">&lt;&gt;</when>
   	  <when test="queryVariableValue.operator.equals('GREATER_THAN')">&gt;</when>
   	  <when test="queryVariableValue.operator.equals('GREATER_THAN_OR_EQUAL')">&gt;=</when>
   	  <when test="queryVariableValue.operator.equals('LESS_THAN')">&lt;</when>
   	  <when test="queryVariableValue.operator.equals('LESS_THAN_OR_EQUAL')">&lt;=</when>
   </choose>
  </sql>


</mapper>